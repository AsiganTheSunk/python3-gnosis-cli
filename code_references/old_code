$ python fetch_abi.py <contract address> -o <target JSON file>

fetch_abi.py

#!/usr/bin/python
import argparse
import requests
import json

# Exports contract ABI in JSON

ABI_ENDPOINT = 'https://api.etherscan.io/api?module=contract&action=getabi&address='

parser = argparse.ArgumentParser()
parser.add_argument('addr', type=str, help='Contract address')
parser.add_argument('-o', '--output', type=str, help="Path to the output JSON file", required=True)

def __main__():

    args = parser.parse_args()

    response = requests.get('%s%s'%(ABI_ENDPOINT, args.addr))
    response_json = response.json()
    abi_json = json.loads(response_json['result'])
    result = json.dumps({"abi":abi_json}, indent=4, sort_keys=True)

    open(args.output, 'w').write(result)

if __name__ == '__main__':
    __main__()

# Gas Estimation
# deployment_estimate = deployment.constructor().estimateGas(transaction=deployment_params)
# if deployment_estimate < self.max_deploy_gas:
#     tx_hash = deployment.constructor().transact(transaction=deployment_params)
# tx_receipt = self.provider.eth.waitForTransactionReceipt(tx_hash)
# contract_address = tx_receipt['contractAddress']
#
# print("Deployed {0} to: {1} using {2} gas.".format(self.contract_to_deploy, contract_address, tx_receipt['cumulativeGasUsed']))
# vars = {
#     'contract_address' : contract_address,
#     'contract_abi' : deployment_compiled['abi']
# }
# with open (self.deployment_vars_path, 'w') as write_file:
#     json.dump(vars, write_file, indent=4)
# print(f"Address and interface ABI for {self.contract_to_deploy} written to {self.deployment_vars_path}")


def clean_logs(log_output):
    indexed_events = log_output[0]['args']
    cleaned_events = {}
    for key, value in indexed_events.items():
        if type(value) == bytes:
            try:
                cleaned_events[key] = value.decode('utf-8').rstrip("\x00")
            except UnicodeDecodeError:
                cleaned_events[key] = Web3.toHex(value)
        else:
            cleaned_events[key] = value
    print(f"Indexed Events: {cleaned_events}")
    return cleaned_events


