$ python fetch_abi.py <contract address> -o <target JSON file>

fetch_abi.py

#!/usr/bin/python
import argparse
import requests
import json

# Exports contract ABI in JSON

ABI_ENDPOINT = 'https://api.etherscan.io/api?module=contract&action=getabi&address='

parser = argparse.ArgumentParser()
parser.add_argument('addr', type=str, help='Contract address')
parser.add_argument('-o', '--output', type=str, help="Path to the output JSON file", required=True)

def __main__():

    args = parser.parse_args()

    response = requests.get('%s%s'%(ABI_ENDPOINT, args.addr))
    response_json = response.json()
    abi_json = json.loads(response_json['result'])
    result = json.dumps({"abi":abi_json}, indent=4, sort_keys=True)

    open(args.output, 'w').write(result)

if __name__ == '__main__':
    __main__()

# Gas Estimation
# deployment_estimate = deployment.constructor().estimateGas(transaction=deployment_params)
# if deployment_estimate < self.max_deploy_gas:
#     tx_hash = deployment.constructor().transact(transaction=deployment_params)
# tx_receipt = self.provider.eth.waitForTransactionReceipt(tx_hash)
# contract_address = tx_receipt['contractAddress']
#
# print("Deployed {0} to: {1} using {2} gas.".format(self.contract_to_deploy, contract_address, tx_receipt['cumulativeGasUsed']))
# vars = {
#     'contract_address' : contract_address,
#     'contract_abi' : deployment_compiled['abi']
# }
# with open (self.deployment_vars_path, 'w') as write_file:
#     json.dump(vars, write_file, indent=4)
# print(f"Address and interface ABI for {self.contract_to_deploy} written to {self.deployment_vars_path}")


def clean_logs(log_output):
    indexed_events = log_output[0]['args']
    cleaned_events = {}
    for key, value in indexed_events.items():
        if type(value) == bytes:
            try:
                cleaned_events[key] = value.decode('utf-8').rstrip("\x00")
            except UnicodeDecodeError:
                cleaned_events[key] = Web3.toHex(value)
        else:
            cleaned_events[key] = value
    print(f"Indexed Events: {cleaned_events}")
    return cleaned_events


       def send (self, function_, *tx_args, event=None, tx_params=None):
        """Contract agnostic transaction function with extras

        Builds a transaction, estimates its gas and compares that to max_tx_gas
        defined on init. Sends the transaction, waits for the receipt and prints
        a number of values about the transaction. If an event is supplied, it
        will capture event output, clean it, and return it.

        Parameters:
            function_(str): name of the function in your contract you wish to
            send the transaction to
            tx_args(list): non-keyworded function arguments to be supplied
            in the order they are defined in contract source
            event(str): name of event (if any) you expect to be emmitted from
            contract
            tx_params(dict): optional dictionary for overloading the
            default deployment transaction parameters. See web3.py's
            eth.sendTransaction for more info.

        Returns:
            receipt(AttributeDict): immutable dict containing various
            transaction outputs
            cleaned_events(dict): optional output of cleaned event logs
        """

        fxn_to_call = getattr(self.contract_instance.functions, function_)
        built_fxn = fxn_to_call(*tx_args)

        gas_estimate = built_fxn.estimateGas(transaction=tx_params)
        print(f"Gas estimate to transact with {function_}: {gas_estimate}\n")

        if gas_estimate < self.max_tx_gas:

            print(f"Sending transaction to {function_} with {tx_args} as arguments.\n")

            tx_hash = built_fxn.transact(transaction=tx_params)

            receipt = self.provider.eth.waitForTransactionReceipt(tx_hash)

            print((
                f"Transaction receipt mined with hash: {receipt['transactionHash'].hex()} "
                f"on block number {receipt['blockNumber']} "
                f"with a total gas usage of {receipt['cumulativeGasUsed']}\n"
                ))

            if event is not None:

                event_to_call = getattr(self.contract_instance.events, event)
                raw_log_output = event_to_call().processReceipt(receipt)
                indexed_events = clean_logs(raw_log_output)

                return receipt, indexed_events

            else:
                return receipt

        else:
            print("Gas cost exceeds {}".format(self.max_tx_gas))