#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Import Os Package
import os

from eth_account import Account
from core.providers.constants.contract_contants import NULL_ADDRESS
from core.providers.constants.ganache_constants import DETERMINISTIC_ACCOUNT_INFORMATION

project_directory = os.getcwd() + '/assets/safe-contracts-1.1.0/'

safe_address_deployment = '0xe982E462b094850F12AF94d21D470e21bE9D0E9C'
proxy_factory_address_deployment = '0xCfEB869F69431e42cdB54A4F4f105C19C080A601'

# Import Web3 Module
from web3 import Web3

# Importing Custom Logger & Logging Modules
from core.logger.custom_logger import CustomLogger
from core.logger.constants.custom_verbose_levels import VERBOSE, FATAL
from logging import INFO, DEBUG, WARNING
import logging

# Todo: Remove logger, pass the logger from "gnosis_cli" upper classes, not enough out to justify owning a logger.
# Todo: Fix Doc Information in all the reworked modules.
# Todo: Create interface for the providers, or move all the functions to a single provider instance with autoconfiguration methods


class GanacheProvider:
    def __init__(self, logging_lvl=INFO, gui=False):
        self.name = self.__class__.__name__
        self.port = self.__setup_provider_port(gui)
        self.network_name = 'ganache'
        self.address = 'http://127.0.0.1'
        self.uri = '{0}:{1}'.format(self.address, self.port)
        self.provider = None

        self.logger = CustomLogger(self.name, logging_lvl)

        # CustomLogger Format Definition
        formatter = logging.Formatter(fmt='%(asctime)s - [%(levelname)s]: %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')

        # Custom Logger File Configuration: File Init Configuration
        file_handler = logging.FileHandler('./log/gnosis_console/gnosis_console_input.log', 'w')
        file_handler.setFormatter(formatter)
        file_handler.setLevel(level=logging_lvl)

        # Custom Logger Console Configuration: Console Init Configuration
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(level=logging_lvl)

        # Custom Logger Console/File Handler Configuration
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

        self._properties = {
            'name': self.name,
            'port': self.port,
            'address': self.address,
            'uri': self.uri
        }

    def __getitem__(self, _key):
        if _key == 'properties':
            return self._properties
        return self._properties[_key]

    @staticmethod
    def __setup_provider_port(gui=False):
        ''' Select Port
        Select the current GanacheProvider port based on input values

            :param gui: True if ganache is being launched by using the gui otherwise it will be set to False
                for the ganache-cli
            :return: Proper port number
        '''
        if gui:
            return '7545'
        return '8545'

    def get_provider(self):
        """ Get Current Provider
        This function will return a provider using the uri generated in the Init.

            :return: Provider for the Blockchain Network
        """
        try:
            if self.provider is None:
                provider = Web3(Web3.HTTPProvider(self.uri, request_kwargs={'timeout': 60}))
                provider_status = provider.isConnected()
                if provider_status:
                    self.logger.info('{provider} connection stablished to {network} network via endpoint {uri}'.format(
                        provider=self.name, network=self.network_name, uri=self.uri
                    ))
                    self.provider = provider
                    return provider
                raise Exception # review: remove this as soon as posible, just for functioning as of right now
            return self.provider
        except Exception as err:
            print('{provider} unable to retrieve a valid connection'.format(provider=self.name), err)

    def get_account_information(self, deterministic=True):
        """ Get Account Information
            This Function will retrieve all the information regarding the automatic accounts generated by Ganache
            ganache-cli -d
        :param: deterministic by default true, it will provide the -d pairs for address/private_key in ganache-cli
        :return:
        """
        if deterministic:
            return DETERMINISTIC_ACCOUNT_INFORMATION
        # Todo: Parse stdout, using a subprocess, by default 2 lines of header + 10 accounts, space* + header + 10 PKeys
        #   Otherwise if the client wants to launch more accounts, just parse based on the param for the ganacha-cli
        return {}

    # Todo: Map Events Properly, and remove them from the list of functions
    def map_contract_methods(self, contract_instance):
        """ Map Contract functions

        :param contract_instance:
        :return:
        """
        item_name = ''
        item_input = ''
        contract_methods = {}
        try:
            for index, item in enumerate(contract_instance.functions.__dict__['abi']):
                try:
                    item_name = item['name']
                except KeyError:
                    continue
                try:
                    item_input = item['inputs']
                except KeyError:
                    item_input = ''

                contract_methods[index] = {
                    'function_name': item_name,
                    'function_call_clean': 'contract_instance.functions.{0}({1}).call',
                    'function_call': 'contract_instance.functions.{}().call'.format(item['name']),
                    'function_input': item_input
                }

            self.logger.info('{0} has successfully retrieved {1} elements from current contract'.format(self.name, len(contract_methods)))
            return contract_methods
        except Exception as err:
            print(err)
